plugins {
    // Android Plugins
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'

    // Hilt Plugins
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'gr.thanflix.series'
    compileSdk 34

    defaultConfig {
        minSdk 26

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        vectorDrawables {
            useSupportLibrary true
        }
    }

//    buildTypes {
//        release {
//            // disable debug
//            /**
//             *  SOS!!!! EMULATOR WILL CRASH IF YOU BUILD ON RELEASE MODE
//             * Because emulator is detected as Root Device!
//             */
//            debuggable false
//
//            // Enables code shrinking, obfuscation, and optimization for only
//            // your project's release build type.
//            minifyEnabled true
//
//            // Enables resource shrinking, which is performed by the
//            // Android Gradle plugin.
//            shrinkResources false
//
//            // Includes the default ProGuard rules files that are packaged with
//            // the Android Gradle plugin. To learn more, go to the section about
//            // R8 configuration files.
//            proguardFiles
//
//            // In order to build a release mode we need to specify signing config
////            signingConfig = signingConfigs.getByName("releaseConfig")
//
//            // Enable Firebase crashlytics on release mode
////            manifestPlaceholders = [crashlyticsCollectionEnabled: "true"]
//        }
//        debug {
//            debuggable true
//            minifyEnabled false
//            shrinkResources false
//
//            // Disable Firebase crashlytics on Debug mode
////            manifestPlaceholders = [crashlyticsCollectionEnabled: "false"]
//        }
//    }

    // Specifies one flavor dimension.
    flavorDimensions "version"

    productFlavors {
        dev {
            // Assigns this product flavor to the "version" flavor dimension.
            // If you are using only one dimension, this property is optional,
            // and the plugin automatically assigns all the module's flavors to
            // that dimension.
            resValue "string", "app_name", "Thanflix"
            dimension "version"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }


    buildFeatures {
        // enable auto generated BuildConfig file
        buildConfig = true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // Enable Add Module/Libraries as dependency
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android Dependencies
    def core = "1.10.1"
    implementation "androidx.core:core-ktx:$core"

    def lifecycle_runtime = "2.6.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_runtime"

    def navigation = "2.7.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation"

    // Compose Dependencies
    def activity_compose = "1.7.2"
    implementation "androidx.activity:activity-compose:$activity_compose"

    def compose = "1.5.0"
    implementation "androidx.compose.ui:ui:$compose"
    implementation "androidx.compose.ui:ui-graphics:$compose"
//    implementation "androidx.compose.ui:ui-tooling-preview:$compose"
//    implementation "androidx.compose.foundation:foundation:$compose"
//    implementation "androidx.compose.runtime:runtime-livedata:$compose"
//    implementation "androidx.compose.runtime:runtime-rxjava2:$compose"
//    implementation "androidx.compose.material:material:$compose"
//    implementation "androidx.compose.material:material-icons-core:$compose"
//    implementation "androidx.compose.material:material-icons-extended:$compose"

    def compose_material = "1.1.1"
    implementation "androidx.compose.material3:material3:$compose_material"

    implementation platform('androidx.compose:compose-bom:2023.03.00')


    // Hilt - dependency
    def hilt = "2.44"
    implementation "com.google.dagger:hilt-android:$hilt"
    kapt "com.google.dagger:hilt-compiler:$hilt"

    // Timber
    def timber_version = "5.0.1"
    implementation "com.jakewharton.timber:timber:${timber_version}"

    // Module Dependencies
    implementation project(':domain')
    implementation project(':presentation')

    // Test Dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'

    // Debug Dependencies
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}